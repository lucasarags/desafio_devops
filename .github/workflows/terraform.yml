name: 'Terraform'

on:
  workflow_dispatch:
    inputs:
      terraform_action:
        type: choice
        description: select terraform action
        options:
        - apply
        - destroy
        required: true
  push:
    branches: [ "main" ]

jobs:
  terraform:
    name: 'Terraform'
    env:
      # AWS secrets
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_DEVOPS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_DEVOPS_SECRET_ACCESS_KEY }}

    runs-on: ubuntu-latest
    #environment: production

    defaults:
      run:
        shell: bash

    steps:
        # Checkout the repository to the GitHub Actions runner
        - name: Checkout
          uses: actions/checkout@v4

        # Configura o perfil 'arags' manualmente
        - name: Configure AWS profile 'arags'
          run: |
            mkdir -p ~/.aws
            echo "[arags]" > ~/.aws/credentials
            echo "aws_access_key_id=${{ secrets.AWS_DEVOPS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
            echo "aws_secret_access_key=${{ secrets.AWS_DEVOPS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
            echo "[arags]" >> ~/.aws/config  
            echo "region=us-east-1" >> ~/.aws/config

        # Exibe o conteúdo dos arquivos de configuração para depuração
        - name: Print AWS config and credentials
          run: |
            echo "AWS Credentials:"
            cat ~/.aws/credentials
            echo "AWS Config:"
            cat ~/.aws/config

        # Verifica se o perfil foi configurado corretamente
        - name: Verify AWS credentials
          run: |
            aws sts get-caller-identity --profile arags

        # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
        - name: Terraform Init
          uses: hashicorp/terraform-github-actions@master
          with:
            tf_actions_version: '0.14.3'
            tf_actions_subcommand: 'init'
            tf_actions_working_dir: './infra'
            tf_actions_comment: true

        # Validação do código Terraform
        - name: Terraform Validate
          uses: hashicorp/terraform-github-actions@master
          with:
            tf_actions_version: '0.14.3'
            tf_actions_subcommand: 'validate'
            tf_actions_working_dir: './infra'
            tf_actions_comment: true
  
        # Plano do Terraform
        - name: Terraform Plan
          uses: hashicorp/terraform-github-actions@master
          with:
            tf_actions_version: '0.14.3'
            tf_actions_subcommand: 'plan'
            tf_actions_working_dir: './infra'
            tf_actions_comment: true
            args: '-out=plan.tfplan'

        - name: Terraform apply
          if: ${{ github.event.inputs.terraform_action == 'apply' }}
          uses: hashicorp/terraform-github-actions@master
          with:
            tf_actions_version: '0.14.3'
            tf_actions_subcommand: ${{ github.event.inputs.terraform_action }}
            tf_actions_working_dir: './infra'
            tf_actions_comment: true
            args: '-auto-approve -input=false plan.tfplan'
           
        - name: Terraform destroy
          if: ${{ github.event.inputs.terraform_action == 'destroy' }}
          uses: hashicorp/terraform-github-actions@master
          with:
            tf_actions_version: '0.14.3'
            tf_actions_subcommand: ${{ github.event.inputs.terraform_action }}
            tf_actions_working_dir: './infra'
            tf_actions_comment: true
            args: '-auto-approve'
